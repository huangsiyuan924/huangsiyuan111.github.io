<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Hello Hexo]]></title>
      <url>/2017/09/17/hello-hexo/</url>
      <content type="html"><![CDATA[<p>Hexo+Github+域名绑定+Material Theme 快速搭建个人博客.<br>整个搭建过程还是算比较简单的，按照官方文档一步一步来，绑定域名时遇到了一些小坑以下为大概步骤记录:</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul>
<li>Node.js 环境</li>
<li>Git 环境</li>
<li>GitHub 注册和配置</li>
<li>Hexo 安装配置</li>
<li>关联 Hexo 与 GitHub Pages</li>
<li>GitHub Pages 地址解析到个人域名</li>
<li>Material Theme 主题配置</li>
<li>Hexo 的常用操作</li>
</ul>
<h2 id="Hexo-安装配置"><a href="#Hexo-安装配置" class="headerlink" title="Hexo 安装配置"></a>Hexo 安装配置</h2><ul>
<li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">官方文档</a></li>
</ul>
<h2 id="关联-GitHub-Pages"><a href="#关联-GitHub-Pages" class="headerlink" title="关联 GitHub Pages"></a>关联 GitHub Pages</h2><ul>
<li>新建Github仓库，例如我的 <a href="https://github.com/Exrick/blog" target="_blank" rel="external">blog</a></li>
<li>在该仓库中新建一个文件如README，然后在仓库设置settings中找到GitHub Pages，选择master分支后保存<br>  <img src="http://oweupqzdv.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170918223505.png" alt=""></li>
<li>在Hexo配置文件中关联你的Github项目，注意此时未绑定域名时的配置，否则会造成样式丢失或404，例如:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">url: https://exrick.github.io/blog</div><div class="line">root: /blog/</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/Exrick/blog.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li>安装 hexo-deployer-git<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="GitHub-Pages-地址解析到个人域名"><a href="#GitHub-Pages-地址解析到个人域名" class="headerlink" title="GitHub Pages 地址解析到个人域名"></a>GitHub Pages 地址解析到个人域名</h2><ul>
<li>购买域名后进入域名解析设置，本人以腾讯云为例:<br>  <img src="http://oweupqzdv.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170918225022.png" alt=""></li>
<li>注意此时绑定域名后Hexo的配置，否则会造成样式丢失或404，例如:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">url: http://blog.exrick.cn</div><div class="line">root: /</div></pre></td></tr></table></figure>
<ul>
<li>在hexo项目根目录下的source文件夹中新建名为 <code>CNAME</code> 没后缀名的文件，其中内容编辑为你绑定的域名，例如 <code>blog.exrick.cn</code>；或者在Github设置页面的Github Pages找到<code>Custom domain</code> 填入你的域名</li>
</ul>
<h2 id="Material-Theme-主题配置"><a href="#Material-Theme-主题配置" class="headerlink" title="Material Theme 主题配置"></a>Material Theme 主题配置</h2><ul>
<li>个人很喜欢的原生主题 <a href="https://viosey.com/" target="_blank" rel="external">viosey大神作品</a></li>
<li><a href="https://material.viosey.com/" target="_blank" rel="external">Material Theme官方文档</a></li>
</ul>
<h2 id="Hexo-的常用操作"><a href="#Hexo-的常用操作" class="headerlink" title="Hexo 的常用操作"></a>Hexo 的常用操作</h2><ul>
<li>创建新文章</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<ul>
<li>运行本地服务器查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<ul>
<li>生成静态文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<ul>
<li>部署到远程</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<ul>
<li>常用组合命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure>
<p>更多命令: <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">中文官方文档</a></p>
]]></content>
      
        <categories>
            
            <category> Tech </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tech </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[gallery]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[timeline]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[About Me]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>Exrick</p>
<p>小黄鱼 也可以作为昵称</p>
<p>喜欢宅，不善主动交际</p>
<p>喜欢尝试新事物，对小众的东西也有特别的兴趣</p>
<p>还有视频特效制作技能</p>
<p>没有代码和音乐，我可能活不下去</p>
<p>使用电脑时，后台必定运行着网易云音乐</p>
<h2 id="抓得到我吗"><a href="#抓得到我吗" class="headerlink" title="抓得到我吗"></a>抓得到我吗</h2><p><strong>主页:</strong> <a href="http://www.exrick.cn" target="_blank" rel="external">exrick.cn</a></p>
<p><strong>Mail:</strong> <a href="mailto:1012139570@qq.com" target="_blank" rel="external">1012139570@qq.com</a></p>
<blockquote>
<p>优先级最高的 IM 工具</p>
</blockquote>
<p><strong>GitHub:</strong> <a href="https://github.com/Exrick" target="_blank" rel="external">Exrick</a></p>
<p><strong>Facebook:</strong> <a href="https://www.facebook.com/exrick xiao" target="_blank" rel="external">Exrick Xiao</a></p>
<p><strong>微博:</strong> <a href="https://weibo.com/2255094222/" target="_blank" rel="external">Exrick</a></p>
<p><strong>网易云音乐:</strong> <a href="http://music.163.com/#/user/home?id=51835343" target="_blank" rel="external">Exrick</a></p>
<p><strong>Bilibili:</strong> <a href="https://space.bilibili.com/22701144/#!/" target="_blank" rel="external">Exrick</a></p>
<p><strong>QQ:</strong> <a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1012139570&amp;site=qq&amp;menu=yes" target="_blank" rel="external">1012139570</a></p>
<p><strong>WeChat:</strong> Exrick</p>
<p><strong>Location:</strong> 中国成都</p>
<h2 id="友链申请"><a href="#友链申请" class="headerlink" title="友链申请"></a>友链申请</h2><blockquote>
<p>在本页下方评论申请即可</p>
</blockquote>
<h4 id="基本的要求"><a href="#基本的要求" class="headerlink" title="基本的要求"></a>基本的要求</h4><ul>
<li>在您申请友情链接之前请先添加本站友链</li>
<li>包括以原创、技术向 为主的有关内容</li>
<li>站点已平稳运行超过 30 天</li>
</ul>
<h4 id="友链格式"><a href="#友链格式" class="headerlink" title="友链格式"></a>友链格式</h4><blockquote>
<ul>
<li>昵称 / 站点名称</li>
<li>网站链接</li>
<li>介绍</li>
<li>Icon / 头像</li>
</ul>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/intro/index.html</url>
      <content type="html"><![CDATA[<iframe frameborder="0" width="100%" height="100%" marginheight="0" marginwidth="0" scrolling="no" src="<!DOCTYPE html>
    <!-- saved from url=(0028)https://hacpai.com/halt.html -->
    <html><head><meta http-equiv=" content-type"="" content="text/html; charset=UTF-8">
    
            <title>About ME</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <link rel="icon" type="image/png" href="http://on2bs9q7q.bkt.clouddn.com/avatar.png">
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
            <style>
                html {
                    height: 100%;
                }
                body {
                    font-family: "Helvetica Neue", "Luxi Sans", "DejaVu Sans", Tahoma, "Hiragino Sans GB", "Microsoft Yahei", sans-serif;
                    background: #79a8ae;
                    color: #CFEBE4;
                    font-size: 18px;
                    line-height: 2;
                    letter-spacing: 1.2px;
                    margin: 0;
                }
                a {
                    color: #ebf7f4;
                }
                .body--ready {
                    background: -webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                    background: -moz-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                    background: -o-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                    background: -ms-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                    background: linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);
                }
                .text {
                    position: fixed;
                    bottom: 100px;
                    text-align: center;
                    width: 100%;
                }
                .canvas {
                    margin: 0 auto;
                    display: block;
                }
            </style>
        <meta name="chromesniffer" id="chromesniffer_meta" content="{&quot;Java&quot;:-1}"><script type="text/javascript" src="chrome-extension://fhhdlnnepfjhlhilgmeepgkhjmhhhjkh/js/detector.js"></script>
    
        <body class="body--ready" data-pinterest-extension-installed="cr1.39.1">
            <canvas class="canvas" width="1820" height="905"></canvas>
            <p class="text">
                <a href="http://binux.cn" target="_blank">binux.cn</a>
            </p>
            <script>
                var S = {
                    init: function () {
                        S.Drawing.init('.canvas');
                        document.body.classList.add('body--ready');
                        S.UI.simulate("I AM|小黄鱼|四川 成都|95后|大四|天蝎座|Software Designer|#time");
                        S.Drawing.loop(function () {
                            S.Shape.render();
                        });
                    }
                };
    
    
                S.Drawing = (function () {
                    var canvas,
                            context,
                            renderFn,
                            requestFrame = window.requestAnimationFrame ||
                            window.webkitRequestAnimationFrame ||
                            window.mozRequestAnimationFrame ||
                            window.oRequestAnimationFrame ||
                            window.msRequestAnimationFrame ||
                            function (callback) {
                                window.setTimeout(callback, 1000 / 60);
                            };
    
                    return {
                        init: function (el) {
                            canvas = document.querySelector(el);
                            context = canvas.getContext('2d');
                            this.adjustCanvas();
    
                            window.addEventListener('resize', function (e) {
                                S.Drawing.adjustCanvas();
                            });
                        },
                        loop: function (fn) {
                            renderFn = !renderFn ? fn : renderFn;
                            this.clearFrame();
                            renderFn();
                            requestFrame.call(window, this.loop.bind(this));
                        },
                        adjustCanvas: function () {
                            canvas.width = window.innerWidth - 100;
                            canvas.height = window.innerHeight - 30;
                        },
                        clearFrame: function () {
                            context.clearRect(0, 0, canvas.width, canvas.height);
                        },
                        getArea: function () {
                            return {w: canvas.width, h: canvas.height};
                        },
                        drawCircle: function (p, c) {
                            context.fillStyle = c.render();
                            context.beginPath();
                            context.arc(p.x, p.y, p.z, 0, 2 * Math.PI, true);
                            context.closePath();
                            context.fill();
                        }
                    };
                }());
    
    
                S.UI = (function () {
                    var interval,
                            currentAction,
                            time,
                            maxShapeSize = 30,
                            sequence = [],
                            cmd = '#';
    
                    function formatTime(date) {
                        var h = date.getHours(),
                                m = date.getMinutes(),
                                m = m < 10 ? '0' + m : m;
                        return h + ':' + m;
                    }
    
                    function getValue(value) {
                        return value && value.split(' ')[1];
                    }
    
                    function getAction(value) {
                        value = value && value.split(' ')[0];
                        return value && value[0] === cmd && value.substring(1);
                    }
    
                    function timedAction(fn, delay, max, reverse) {
                        clearInterval(interval);
                        currentAction = reverse ? max : 1;
                        fn(currentAction);
    
                        if (!max || (!reverse && currentAction < max) || (reverse && currentAction > 0)) {
                            interval = setInterval(function () {
                                currentAction = reverse ? currentAction - 1 : currentAction + 1;
                                fn(currentAction);
    
                                if ((!reverse && max && currentAction === max) || (reverse && currentAction === 0)) {
                                    clearInterval(interval);
                                }
                            }, delay);
                        }
                    }
    
                    function performAction(value) {
                        var action,
                                value,
                                current;
    
                        sequence = typeof (value) === 'object' ? value : sequence.concat(value.split('|'));
    
                        timedAction(function (index) {
                            current = sequence.shift();
                            action = getAction(current);
                            value = getValue(current);
    
                            switch (action) {
                                case 'countdown':
                                    value = parseInt(value) || 10;
                                    value = value > 0 ? value : 10;
    
                                    timedAction(function (index) {
                                        if (index === 0) {
                                            if (sequence.length === 0) {
                                                S.Shape.switchShape(S.ShapeBuilder.letter(''));
                                            } else {
                                                performAction(sequence);
                                            }
                                        } else {
                                            S.Shape.switchShape(S.ShapeBuilder.letter(index), true);
                                        }
                                    }, 1000, value, true);
                                    break;
    
                                case 'rectangle':
                                    value = value && value.split('x');
                                    value = (value && value.length === 2) ? value : [maxShapeSize, maxShapeSize / 2];
    
                                    S.Shape.switchShape(S.ShapeBuilder.rectangle(Math.min(maxShapeSize, parseInt(value[0])), Math.min(maxShapeSize, parseInt(value[1]))));
                                    break;
    
                                case 'circle':
                                    value = parseInt(value) || maxShapeSize;
                                    value = Math.min(value, maxShapeSize);
                                    S.Shape.switchShape(S.ShapeBuilder.circle(value));
                                    break;
    
                                case 'time':
                                    var t = formatTime(new Date());
    
                                    if (sequence.length > 0) {
                                        S.Shape.switchShape(S.ShapeBuilder.letter(t));
                                    } else {
                                        timedAction(function () {
                                            t = formatTime(new Date());
                                            if (t !== time) {
                                                time = t;
                                                S.Shape.switchShape(S.ShapeBuilder.letter(time));
                                            }
                                        }, 1000);
                                    }
                                    break;
    
                                default:
                                    S.Shape.switchShape(S.ShapeBuilder.letter(current[0] === cmd ? 'HacPai' : current));
                            }
                        }, 2000, sequence.length);
                    }
    
                    return {
                        simulate: function (action) {
                            performAction(action);
                        }
                    };
                }());
    
    
                S.Point = function (args) {
                    this.x = args.x;
                    this.y = args.y;
                    this.z = args.z;
                    this.a = args.a;
                    this.h = args.h;
                };
    
    
                S.Color = function (r, g, b, a) {
                    this.r = r;
                    this.g = g;
                    this.b = b;
                    this.a = a;
                };
    
                S.Color.prototype = {
                    render: function () {
                        return 'rgba(' + this.r + ',' + +this.g + ',' + this.b + ',' + this.a + ')';
                    }
                };
    
    
                S.Dot = function (x, y) {
                    this.p = new S.Point({
                        x: x,
                        y: y,
                        z: 5,
                        a: 1,
                        h: 0
                    });
    
                    this.e = 0.07;
                    this.s = true;
    
                    this.c = new S.Color(255, 255, 255, this.p.a);
    
                    this.t = this.clone();
                    this.q = [];
                };
    
                S.Dot.prototype = {
                    clone: function () {
                        return new S.Point({
                            x: this.x,
                            y: this.y,
                            z: this.z,
                            a: this.a,
                            h: this.h
                        });
                    },
                    _draw: function () {
                        this.c.a = this.p.a;
                        S.Drawing.drawCircle(this.p, this.c);
                    },
                    _moveTowards: function (n) {
                        var details = this.distanceTo(n, true),
                                dx = details[0],
                                dy = details[1],
                                d = details[2],
                                e = this.e * d;
    
                        if (this.p.h === -1) {
                            this.p.x = n.x;
                            this.p.y = n.y;
                            return true;
                        }
    
                        if (d > 1) {
                            this.p.x -= ((dx / d) * e);
                            this.p.y -= ((dy / d) * e);
                        } else {
                            if (this.p.h > 0) {
                                this.p.h--;
                            } else {
                                return true;
                            }
                        }
    
                        return false;
                    },
                    _update: function () {
                        if (this._moveTowards(this.t)) {
                            var p = this.q.shift();
    
                            if (p) {
                                this.t.x = p.x || this.p.x;
                                this.t.y = p.y || this.p.y;
                                this.t.z = p.z || this.p.z;
                                this.t.a = p.a || this.p.a;
                                this.p.h = p.h || 0;
                            } else {
                                if (this.s) {
                                    this.p.x -= Math.sin(Math.random() * 3.142);
                                    this.p.y -= Math.sin(Math.random() * 3.142);
                                } else {
                                    this.move(new S.Point({
                                        x: this.p.x + (Math.random() * 50) - 25,
                                        y: this.p.y + (Math.random() * 50) - 25
                                    }));
                                }
                            }
                        }
    
                        d = this.p.a - this.t.a;
                        this.p.a = Math.max(0.1, this.p.a - (d * 0.05));
                        d = this.p.z - this.t.z;
                        this.p.z = Math.max(1, this.p.z - (d * 0.05));
                    },
                    distanceTo: function (n, details) {
                        var dx = this.p.x - n.x,
                                dy = this.p.y - n.y,
                                d = Math.sqrt(dx * dx + dy * dy);
    
                        return details ? [dx, dy, d] : d;
                    },
                    move: function (p, avoidStatic) {
                        if (!avoidStatic || (avoidStatic && this.distanceTo(p) > 1)) {
                            this.q.push(p);
                        }
                    },
                    render: function () {
                        this._update();
                        this._draw();
                    }
                };
    
    
                S.ShapeBuilder = (function () {
                    var gap = 13,
                            shapeCanvas = document.createElement('canvas'),
                            shapeContext = shapeCanvas.getContext('2d'),
                            fontSize = 500,
                            fontFamily = 'Avenir, Helvetica Neue, Helvetica, Arial, sans-serif';
    
                    function fit() {
                        shapeCanvas.width = Math.floor(window.innerWidth / gap) * gap;
                        shapeCanvas.height = Math.floor(window.innerHeight / gap) * gap;
                        shapeContext.fillStyle = 'red';
                        shapeContext.textBaseline = 'middle';
                        shapeContext.textAlign = 'center';
                    }
    
                    function processCanvas() {
                        var pixels = shapeContext.getImageData(0, 0, shapeCanvas.width, shapeCanvas.height).data;
                        dots = [],
                                pixels,
                                x = 0,
                                y = 0,
                                fx = shapeCanvas.width,
                                fy = shapeCanvas.height,
                                w = 0,
                                h = 0;
    
                        for (var p = 0; p < pixels.length; p += (4 * gap)) {
                            if (pixels[p + 3] > 0) {
                                dots.push(new S.Point({
                                    x: x,
                                    y: y
                                }));
    
                                w = x > w ? x : w;
                                h = y > h ? y : h;
                                fx = x < fx ? x : fx;
                                fy = y < fy ? y : fy;
                            }
    
                            x += gap;
    
                            if (x >= shapeCanvas.width) {
                                x = 0;
                                y += gap;
                                p += gap * 4 * shapeCanvas.width;
                            }
                        }
    
                        return {dots: dots, w: w + fx, h: h + fy};
                    }
    
                    function setFontSize(s) {
                        shapeContext.font = 'bold ' + s + 'px ' + fontFamily;
                    }
    
                    function isNumber(n) {
                        return !isNaN(parseFloat(n)) && isFinite(n);
                    }
    
                    function init() {
                        fit();
                        window.addEventListener('resize', fit);
                    }
    
                    // Init
                    init();
    
                    return {
                        imageFile: function (url, callback) {
                            var image = new Image(),
                                    a = S.Drawing.getArea();
    
                            image.onload = function () {
                                shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);
                                shapeContext.drawImage(this, 0, 0, a.h * 0.6, a.h * 0.6);
                                callback(processCanvas());
                            };
    
                            image.onerror = function () {
                                callback(S.ShapeBuilder.letter('What?'));
                            };
    
                            image.src = url;
                        },
                        circle: function (d) {
                            var r = Math.max(0, d) / 2;
                            shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);
                            shapeContext.beginPath();
                            shapeContext.arc(r * gap, r * gap, r * gap, 0, 2 * Math.PI, false);
                            shapeContext.fill();
                            shapeContext.closePath();
    
                            return processCanvas();
                        },
                        letter: function (l) {
                            var s = 0;
    
                            setFontSize(fontSize);
                            s = Math.min(fontSize,
                                    (shapeCanvas.width / shapeContext.measureText(l).width) * 0.8 * fontSize,
                                    (shapeCanvas.height / fontSize) * (isNumber(l) ? 1 : 0.45) * fontSize);
                            setFontSize(s);
    
                            shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);
                            shapeContext.fillText(l, shapeCanvas.width / 2, shapeCanvas.height / 2);
    
                            return processCanvas();
                        },
                        rectangle: function (w, h) {
                            var dots = [],
                                    width = gap * w,
                                    height = gap * h;
    
                            for (var y = 0; y < height; y += gap) {
                                for (var x = 0; x < width; x += gap) {
                                    dots.push(new S.Point({
                                        x: x,
                                        y: y
                                    }));
                                }
                            }
    
                            return {dots: dots, w: width, h: height};
                        }
                    };
                }());
    
    
                S.Shape = (function () {
                    var dots = [],
                            width = 0,
                            height = 0,
                            cx = 0,
                            cy = 0;
    
                    function compensate() {
                        var a = S.Drawing.getArea();
    
                        cx = a.w / 2 - width / 2;
                        cy = a.h / 2 - height / 2;
                    }
    
                    return {
                        shuffleIdle: function () {
                            var a = S.Drawing.getArea();
    
                            for (var d = 0; d < dots.length; d++) {
                                if (!dots[d].s) {
                                    dots[d].move({
                                        x: Math.random() * a.w,
                                        y: Math.random() * a.h
                                    });
                                }
                            }
                        },
                        switchShape: function (n, fast) {
                            var size,
                                    a = S.Drawing.getArea();
    
                            width = n.w;
                            height = n.h;
    
                            compensate();
    
                            if (n.dots.length > dots.length) {
                                size = n.dots.length - dots.length;
                                for (var d = 1; d <= size; d++) {
                                    dots.push(new S.Dot(a.w / 2, a.h / 2));
                                }
                            }
    
                            var d = 0,
                                    i = 0;
    
                            while (n.dots.length > 0) {
                                i = Math.floor(Math.random() * n.dots.length);
                                dots[d].e = fast ? 0.25 : (dots[d].s ? 0.14 : 0.11);
    
                                if (dots[d].s) {
                                    dots[d].move(new S.Point({
                                        z: Math.random() * 20 + 10,
                                        a: Math.random(),
                                        h: 18
                                    }));
                                } else {
                                    dots[d].move(new S.Point({
                                        z: Math.random() * 5 + 5,
                                        h: fast ? 18 : 30
                                    }));
                                }
    
                                dots[d].s = true;
                                dots[d].move(new S.Point({
                                    x: n.dots[i].x + cx,
                                    y: n.dots[i].y + cy,
                                    a: 1,
                                    z: 5,
                                    h: 0
                                }));
    
                                n.dots = n.dots.slice(0, i).concat(n.dots.slice(i + 1));
                                d++;
                            }
    
                            for (var i = d; i < dots.length; i++) {
                                if (dots[i].s) {
                                    dots[i].move(new S.Point({
                                        z: Math.random() * 20 + 10,
                                        a: Math.random(),
                                        h: 20
                                    }));
    
                                    dots[i].s = false;
                                    dots[i].e = 0.04;
                                    dots[i].move(new S.Point({
                                        x: Math.random() * a.w,
                                        y: Math.random() * a.h,
                                        a: 0.3, //.4
                                        z: Math.random() * 4,
                                        h: 0
                                    }));
                                }
                            }
                        },
                        render: function () {
                            for (var d = 0; d < dots.length; d++) {
                                dots[d].render();
                            }
                        }
                    };
                }());
                S.init();
            </script>
    
    </body><div></div>"></iframe>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/intro/index.html</url>
      <content type="html"><![CDATA[<p>&lt;!DOCTYPE html&gt;<br><!-- saved from url=(0028)https://hacpai.com/halt.html --></p>
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><br><br>        <title>About ME</title><br>        <meta name="viewport" content="width=device-width, initial-scale=1.0"><br>        <link rel="icon" type="image/png" href="http://on2bs9q7q.bkt.clouddn.com/avatar.png"><br>        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0"><br>        <style><br>            html {<br>                height: 100%;<br>            }<br>            body {<br>                font-family: “Helvetica Neue”, “Luxi Sans”, “DejaVu Sans”, Tahoma, “Hiragino Sans GB”, “Microsoft Yahei”, sans-serif;<br>                background: #79a8ae;<br>                color: #CFEBE4;<br>                font-size: 18px;<br>                line-height: 2;<br>                letter-spacing: 1.2px;<br>                margin: 0;<br>            }<br>            a {<br>                color: #ebf7f4;<br>            }<br>            .body–ready {<br>                background: -webkit-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);<br>                background: -moz-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);<br>                background: -o-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);<br>                background: -ms-linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);<br>                background: linear-gradient(top, rgb(203, 235, 219) 0%, rgb(55, 148, 192) 120%);<br>            }<br>            .text {<br>                position: fixed;<br>                bottom: 100px;<br>                text-align: center;<br>                width: 100%;<br>            }<br>            .canvas {<br>                margin: 0 auto;<br>                display: block;<br>            }<br>        </style><br>    <meta name="chromesniffer" id="chromesniffer_meta" content="{&quot;Java&quot;:-1}"><script type="text/javascript" src="chrome-extension://fhhdlnnepfjhlhilgmeepgkhjmhhhjkh/js/detector.js"></script></head><br><br>    <body class="body--ready" data-pinterest-extension-installed="cr1.39.1"><br>        <canvas class="canvas" width="1820" height="905"></canvas><br>        <p class="text"><br>            <a href="http://binux.cn" target="_blank">binux.cn</a><br>        </p><br>        <script><br>            var S = {<br>                init: function () {<br>                    S.Drawing.init(‘.canvas’);<br>                    document.body.classList.add(‘body–ready’);<br>                    S.UI.simulate(“About ME|���|̩���˻���|�־��Ͼ�|95��|����|��Ů��|���� �ܹ�ʦ|���� �ֲ�ʽ|#time”);<br>                    S.Drawing.loop(function () {<br>                        S.Shape.render();<br>                    });<br>                }<br>            };<br><br><br>            S.Drawing = (function () {<br>                var canvas,<br>                        context,<br>                        renderFn,<br>                        requestFrame = window.requestAnimationFrame ||<br>                        window.webkitRequestAnimationFrame ||<br>                        window.mozRequestAnimationFrame ||<br>                        window.oRequestAnimationFrame ||<br>                        window.msRequestAnimationFrame ||<br>                        function (callback) {<br>                            window.setTimeout(callback, 1000 / 60);<br>                        };<br><br>                return {<br>                    init: function (el) {<br>                        canvas = document.querySelector(el);<br>                        context = canvas.getContext(‘2d’);<br>                        this.adjustCanvas();<br><br>                        window.addEventListener(‘resize’, function (e) {<br>                            S.Drawing.adjustCanvas();<br>                        });<br>                    },<br>                    loop: function (fn) {<br>                        renderFn = !renderFn ? fn : renderFn;<br>                        this.clearFrame();<br>                        renderFn();<br>                        requestFrame.call(window, this.loop.bind(this));<br>                    },<br>                    adjustCanvas: function () {<br>                        canvas.width = window.innerWidth - 100;<br>                        canvas.height = window.innerHeight - 30;<br>                    },<br>                    clearFrame: function () {<br>                        context.clearRect(0, 0, canvas.width, canvas.height);<br>                    },<br>                    getArea: function () {<br>                        return {w: canvas.width, h: canvas.height};<br>                    },<br>                    drawCircle: function (p, c) {<br>                        context.fillStyle = c.render();<br>                        context.beginPath();<br>                        context.arc(p.x, p.y, p.z, 0, 2 <em> Math.PI, true);<br>                        context.closePath();<br>                        context.fill();<br>                    }<br>                };<br>            }());<br><br><br>            S.UI = (function () {<br>                var interval,<br>                        currentAction,<br>                        time,<br>                        maxShapeSize = 30,<br>                        sequence = [],<br>                        cmd = ‘#’;<br><br>                function formatTime(date) {<br>                    var h = date.getHours(),<br>                            m = date.getMinutes(),<br>                            m = m &lt; 10 ? ‘0’ + m : m;<br>                    return h + ‘:’ + m;<br>                }<br><br>                function getValue(value) {<br>                    return value &amp;&amp; value.split(‘ ‘)[1];<br>                }<br><br>                function getAction(value) {<br>                    value = value &amp;&amp; value.split(‘ ‘)[0];<br>                    return value &amp;&amp; value[0] === cmd &amp;&amp; value.substring(1);<br>                }<br><br>                function timedAction(fn, delay, max, reverse) {<br>                    clearInterval(interval);<br>                    currentAction = reverse ? max : 1;<br>                    fn(currentAction);<br><br>                    if (!max || (!reverse &amp;&amp; currentAction &lt; max) || (reverse &amp;&amp; currentAction &gt; 0)) {<br>                        interval = setInterval(function () {<br>                            currentAction = reverse ? currentAction - 1 : currentAction + 1;<br>                            fn(currentAction);<br><br>                            if ((!reverse &amp;&amp; max &amp;&amp; currentAction === max) || (reverse &amp;&amp; currentAction === 0)) {<br>                                clearInterval(interval);<br>                            }<br>                        }, delay);<br>                    }<br>                }<br><br>                function performAction(value) {<br>                    var action,<br>                            value,<br>                            current;<br><br>                    sequence = typeof (value) === ‘object’ ? value : sequence.concat(value.split(‘|’));<br><br>                    timedAction(function (index) {<br>                        current = sequence.shift();<br>                        action = getAction(current);<br>                        value = getValue(current);<br><br>                        switch (action) {<br>                            case ‘countdown’:<br>                                value = parseInt(value) || 10;<br>                                value = value &gt; 0 ? value : 10;<br><br>                                timedAction(function (index) {<br>                                    if (index === 0) {<br>                                        if (sequence.length === 0) {<br>                                            S.Shape.switchShape(S.ShapeBuilder.letter(‘’));<br>                                        } else {<br>                                            performAction(sequence);<br>                                        }<br>                                    } else {<br>                                        S.Shape.switchShape(S.ShapeBuilder.letter(index), true);<br>                                    }<br>                                }, 1000, value, true);<br>                                break;<br><br>                            case ‘rectangle’:<br>                                value = value &amp;&amp; value.split(‘x’);<br>                                value = (value &amp;&amp; value.length === 2) ? value : [maxShapeSize, maxShapeSize / 2];<br><br>                                S.Shape.switchShape(S.ShapeBuilder.rectangle(Math.min(maxShapeSize, parseInt(value[0])), Math.min(maxShapeSize, parseInt(value[1]))));<br>                                break;<br><br>                            case ‘circle’:<br>                                value = parseInt(value) || maxShapeSize;<br>                                value = Math.min(value, maxShapeSize);<br>                                S.Shape.switchShape(S.ShapeBuilder.circle(value));<br>                                break;<br><br>                            case ‘time’:<br>                                var t = formatTime(new Date());<br><br>                                if (sequence.length &gt; 0) {<br>                                    S.Shape.switchShape(S.ShapeBuilder.letter(t));<br>                                } else {<br>                                    timedAction(function () {<br>                                        t = formatTime(new Date());<br>                                        if (t !== time) {<br>                                            time = t;<br>                                            S.Shape.switchShape(S.ShapeBuilder.letter(time));<br>                                        }<br>                                    }, 1000);<br>                                }<br>                                break;<br><br>                            default:<br>                                S.Shape.switchShape(S.ShapeBuilder.letter(current[0] === cmd ? ‘HacPai’ : current));<br>                        }<br>                    }, 2000, sequence.length);<br>                }<br><br>                return {<br>                    simulate: function (action) {<br>                        performAction(action);<br>                    }<br>                };<br>            }());<br><br><br>            S.Point = function (args) {<br>                this.x = args.x;<br>                this.y = args.y;<br>                this.z = args.z;<br>                this.a = args.a;<br>                this.h = args.h;<br>            };<br><br><br>            S.Color = function (r, g, b, a) {<br>                this.r = r;<br>                this.g = g;<br>                this.b = b;<br>                this.a = a;<br>            };<br><br>            S.Color.prototype = {<br>                render: function () {<br>                    return ‘rgba(‘ + this.r + ‘,’ + +this.g + ‘,’ + this.b + ‘,’ + this.a + ‘)’;<br>                }<br>            };<br><br><br>            S.Dot = function (x, y) {<br>                this.p = new S.Point({<br>                    x: x,<br>                    y: y,<br>                    z: 5,<br>                    a: 1,<br>                    h: 0<br>                });<br><br>                this.e = 0.07;<br>                this.s = true;<br><br>                this.c = new S.Color(255, 255, 255, this.p.a);<br><br>                this.t = this.clone();<br>                this.q = [];<br>            };<br><br>            S.Dot.prototype = {<br>                clone: function () {<br>                    return new S.Point({<br>                        x: this.x,<br>                        y: this.y,<br>                        z: this.z,<br>                        a: this.a,<br>                        h: this.h<br>                    });<br>                },<br>                _draw: function () {<br>                    this.c.a = this.p.a;<br>                    S.Drawing.drawCircle(this.p, this.c);<br>                },<br>                _moveTowards: function (n) {<br>                    var details = this.distanceTo(n, true),<br>                            dx = details[0],<br>                            dy = details[1],<br>                            d = details[2],<br>                            e = this.e </em> d;<br><br>                    if (this.p.h === -1) {<br>                        this.p.x = n.x;<br>                        this.p.y = n.y;<br>                        return true;<br>                    }<br><br>                    if (d &gt; 1) {<br>                        this.p.x -= ((dx / d) <em> e);<br>                        this.p.y -= ((dy / d) </em> e);<br>                    } else {<br>                        if (this.p.h &gt; 0) {<br>                            this.p.h–;<br>                        } else {<br>                            return true;<br>                        }<br>                    }<br><br>                    return false;<br>                },<br>                _update: function () {<br>                    if (this._moveTowards(this.t)) {<br>                        var p = this.q.shift();<br><br>                        if (p) {<br>                            this.t.x = p.x || this.p.x;<br>                            this.t.y = p.y || this.p.y;<br>                            this.t.z = p.z || this.p.z;<br>                            this.t.a = p.a || this.p.a;<br>                            this.p.h = p.h || 0;<br>                        } else {<br>                            if (this.s) {<br>                                this.p.x -= Math.sin(Math.random() <em> 3.142);<br>                                this.p.y -= Math.sin(Math.random() </em> 3.142);<br>                            } else {<br>                                this.move(new S.Point({<br>                                    x: this.p.x + (Math.random() <em> 50) - 25,<br>                                    y: this.p.y + (Math.random() </em> 50) - 25<br>                                }));<br>                            }<br>                        }<br>                    }<br><br>                    d = this.p.a - this.t.a;<br>                    this.p.a = Math.max(0.1, this.p.a - (d <em> 0.05));<br>                    d = this.p.z - this.t.z;<br>                    this.p.z = Math.max(1, this.p.z - (d </em> 0.05));<br>                },<br>                distanceTo: function (n, details) {<br>                    var dx = this.p.x - n.x,<br>                            dy = this.p.y - n.y,<br>                            d = Math.sqrt(dx <em> dx + dy </em> dy);<br><br>                    return details ? [dx, dy, d] : d;<br>                },<br>                move: function (p, avoidStatic) {<br>                    if (!avoidStatic || (avoidStatic &amp;&amp; this.distanceTo(p) &gt; 1)) {<br>                        this.q.push(p);<br>                    }<br>                },<br>                render: function () {<br>                    this._update();<br>                    this._draw();<br>                }<br>            };<br><br><br>            S.ShapeBuilder = (function () {<br>                var gap = 13,<br>                        shapeCanvas = document.createElement(‘canvas’),<br>                        shapeContext = shapeCanvas.getContext(‘2d’),<br>                        fontSize = 500,<br>                        fontFamily = ‘Avenir, Helvetica Neue, Helvetica, Arial, sans-serif’;<br><br>                function fit() {<br>                    shapeCanvas.width = Math.floor(window.innerWidth / gap) <em> gap;<br>                    shapeCanvas.height = Math.floor(window.innerHeight / gap) </em> gap;<br>                    shapeContext.fillStyle = ‘red’;<br>                    shapeContext.textBaseline = ‘middle’;<br>                    shapeContext.textAlign = ‘center’;<br>                }<br><br>                function processCanvas() {<br>                    var pixels = shapeContext.getImageData(0, 0, shapeCanvas.width, shapeCanvas.height).data;<br>                    dots = [],<br>                            pixels,<br>                            x = 0,<br>                            y = 0,<br>                            fx = shapeCanvas.width,<br>                            fy = shapeCanvas.height,<br>                            w = 0,<br>                            h = 0;<br><br>                    for (var p = 0; p &lt; pixels.length; p += (4 <em> gap)) {<br>                        if (pixels[p + 3] &gt; 0) {<br>                            dots.push(new S.Point({<br>                                x: x,<br>                                y: y<br>                            }));<br><br>                            w = x &gt; w ? x : w;<br>                            h = y &gt; h ? y : h;<br>                            fx = x &lt; fx ? x : fx;<br>                            fy = y &lt; fy ? y : fy;<br>                        }<br><br>                        x += gap;<br><br>                        if (x &gt;= shapeCanvas.width) {<br>                            x = 0;<br>                            y += gap;<br>                            p += gap </em> 4 <em> shapeCanvas.width;<br>                        }<br>                    }<br><br>                    return {dots: dots, w: w + fx, h: h + fy};<br>                }<br><br>                function setFontSize(s) {<br>                    shapeContext.font = ‘bold ‘ + s + ‘px ‘ + fontFamily;<br>                }<br><br>                function isNumber(n) {<br>                    return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);<br>                }<br><br>                function init() {<br>                    fit();<br>                    window.addEventListener(‘resize’, fit);<br>                }<br><br>                // Init<br>                init();<br><br>                return {<br>                    imageFile: function (url, callback) {<br>                        var image = new Image(),<br>                                a = S.Drawing.getArea();<br><br>                        image.onload = function () {<br>                            shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);<br>                            shapeContext.drawImage(this, 0, 0, a.h </em> 0.6, a.h <em> 0.6);<br>                            callback(processCanvas());<br>                        };<br><br>                        image.onerror = function () {<br>                            callback(S.ShapeBuilder.letter(‘What?’));<br>                        };<br><br>                        image.src = url;<br>                    },<br>                    circle: function (d) {<br>                        var r = Math.max(0, d) / 2;<br>                        shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);<br>                        shapeContext.beginPath();<br>                        shapeContext.arc(r </em> gap, r <em> gap, r </em> gap, 0, 2 <em> Math.PI, false);<br>                        shapeContext.fill();<br>                        shapeContext.closePath();<br><br>                        return processCanvas();<br>                    },<br>                    letter: function (l) {<br>                        var s = 0;<br><br>                        setFontSize(fontSize);<br>                        s = Math.min(fontSize,<br>                                (shapeCanvas.width / shapeContext.measureText(l).width) </em> 0.8 <em> fontSize,<br>                                (shapeCanvas.height / fontSize) </em> (isNumber(l) ? 1 : 0.45) <em> fontSize);<br>                        setFontSize(s);<br><br>                        shapeContext.clearRect(0, 0, shapeCanvas.width, shapeCanvas.height);<br>                        shapeContext.fillText(l, shapeCanvas.width / 2, shapeCanvas.height / 2);<br><br>                        return processCanvas();<br>                    },<br>                    rectangle: function (w, h) {<br>                        var dots = [],<br>                                width = gap </em> w,<br>                                height = gap <em> h;<br><br>                        for (var y = 0; y &lt; height; y += gap) {<br>                            for (var x = 0; x &lt; width; x += gap) {<br>                                dots.push(new S.Point({<br>                                    x: x,<br>                                    y: y<br>                                }));<br>                            }<br>                        }<br><br>                        return {dots: dots, w: width, h: height};<br>                    }<br>                };<br>            }());<br><br><br>            S.Shape = (function () {<br>                var dots = [],<br>                        width = 0,<br>                        height = 0,<br>                        cx = 0,<br>                        cy = 0;<br><br>                function compensate() {<br>                    var a = S.Drawing.getArea();<br><br>                    cx = a.w / 2 - width / 2;<br>                    cy = a.h / 2 - height / 2;<br>                }<br><br>                return {<br>                    shuffleIdle: function () {<br>                        var a = S.Drawing.getArea();<br><br>                        for (var d = 0; d &lt; dots.length; d++) {<br>                            if (!dots[d].s) {<br>                                dots[d].move({<br>                                    x: Math.random() </em> a.w,<br>                                    y: Math.random() <em> a.h<br>                                });<br>                            }<br>                        }<br>                    },<br>                    switchShape: function (n, fast) {<br>                        var size,<br>                                a = S.Drawing.getArea();<br><br>                        width = n.w;<br>                        height = n.h;<br><br>                        compensate();<br><br>                        if (n.dots.length &gt; dots.length) {<br>                            size = n.dots.length - dots.length;<br>                            for (var d = 1; d &lt;= size; d++) {<br>                                dots.push(new S.Dot(a.w / 2, a.h / 2));<br>                            }<br>                        }<br><br>                        var d = 0,<br>                                i = 0;<br><br>                        while (n.dots.length &gt; 0) {<br>                            i = Math.floor(Math.random() </em> n.dots.length);<br>                            dots[d].e = fast ? 0.25 : (dots[d].s ? 0.14 : 0.11);<br><br>                            if (dots[d].s) {<br>                                dots[d].move(new S.Point({<br>                                    z: Math.random() <em> 20 + 10,<br>                                    a: Math.random(),<br>                                    h: 18<br>                                }));<br>                            } else {<br>                                dots[d].move(new S.Point({<br>                                    z: Math.random() </em> 5 + 5,<br>                                    h: fast ? 18 : 30<br>                                }));<br>                            }<br><br>                            dots[d].s = true;<br>                            dots[d].move(new S.Point({<br>                                x: n.dots[i].x + cx,<br>                                y: n.dots[i].y + cy,<br>                                a: 1,<br>                                z: 5,<br>                                h: 0<br>                            }));<br><br>                            n.dots = n.dots.slice(0, i).concat(n.dots.slice(i + 1));<br>                            d++;<br>                        }<br><br>                        for (var i = d; i &lt; dots.length; i++) {<br>                            if (dots[i].s) {<br>                                dots[i].move(new S.Point({<br>                                    z: Math.random() <em> 20 + 10,<br>                                    a: Math.random(),<br>                                    h: 20<br>                                }));<br><br>                                dots[i].s = false;<br>                                dots[i].e = 0.04;<br>                                dots[i].move(new S.Point({<br>                                    x: Math.random() </em> a.w,<br>                                    y: Math.random() <em> a.h,<br>                                    a: 0.3, //.4<br>                                    z: Math.random() </em> 4,<br>                                    h: 0<br>                                }));<br>                            }<br>                        }<br>                    },<br>                    render: function () {<br>                        for (var d = 0; d &lt; dots.length; d++) {<br>                            dots[d].render();<br>                        }<br>                    }<br>                };<br>            }());<br>            S.init();<br>        </script><br><br></body><div></div></html>
]]></content>
    </entry>
    
  
</search>
